{{!
    Copyright Â© 2025 Cyril de Catheu (cdecatheu@hey.com)

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
}}
<script type="module">
    import {LitElement, html, css, unsafeHTML} from '{{ LIT_DEPENDENCY }}';

    class JtRadio extends LitElement {
        static styles = css`
            :host {
                display: block;
                margin: var(--jt-spacing-md) 0;
                width: var(--radio-width, auto);
            }

            .radio-container {
                display: flex;
                flex-direction: column;
                gap: var(--jt-spacing-sm);
            }

            .label-row {
                display: flex;
                align-items: flex-start;
                gap: var(--jt-spacing-xs);
            }

            .label {
                font-family: var(--jt-font-family);
                font-size: var(--jt-font-size-base);
                color: var(--jt-text-primary);
                line-height: var(--jt-line-height-normal);
            }

            .label.spacer {
                visibility: hidden;
            }

            .label strong {
                font-weight: var(--jt-font-weight-bold);
            }

            .label em {
                font-style: italic;
            }

            .label code {
                background-color: var(--jt-bg-tertiary);
                padding: 0.1em 0.3em;
                border-radius: var(--jt-border-radius-sm);
                font-family: var(--jt-font-family-mono);
                font-size: 0.9em;
            }

            .label a {
                color: var(--jt-theme-color);
                text-decoration: none;
            }

            .label a:hover {
                text-decoration: underline;
            }

            .label del {
                text-decoration: line-through;
            }

            /* Radio Group Styles */
            .radio-group {
                display: flex;
                gap: var(--jt-spacing-md);
            }

            .radio-group.horizontal {
                flex-direction: row;
                flex-wrap: wrap;
            }

            .radio-group.vertical {
                flex-direction: column;
            }

            .radio-option {
                display: flex;
                flex-direction: column;
                gap: var(--jt-spacing-xs);
            }

            .radio-choice {
                display: flex;
                align-items: flex-start;
                gap: var(--jt-spacing-sm);
                cursor: pointer;
            }

            .radio-choice.disabled {
                cursor: not-allowed;
                opacity: 0.5;
            }

            .radio-wrapper {
                position: relative;
                display: flex;
                align-items: flex-start;
                flex-shrink: 0;
                margin-top: 2px; /* Align with text baseline */
            }

            .radio-input {
                opacity: 0;
                width: 0;
                height: 0;
                position: absolute;
            }

            .radio-visual {
                position: relative;
                display: flex;
                align-items: center;
                justify-content: center;
                width: 18px;
                height: 18px;
                background: var(--jt-bg-primary);
                border: 2px solid var(--jt-border-color);
                border-radius: 50%;
                cursor: pointer;
                transition: all var(--jt-transition-normal);
            }

            .radio-visual:hover {
                background-color: var(--jt-bg-secondary);
                border-color: var(--jt-theme-color);
            }

            .radio-input:checked + .radio-visual {
                background: var(--jt-theme-color);
                border-color: var(--jt-theme-color);
            }

            .radio-input:checked + .radio-visual::after {
                content: '';
                width: 8px;
                height: 8px;
                background: white;
                border-radius: 50%;
            }

            .radio-input:disabled + .radio-visual {
                opacity: 0.5;
                cursor: not-allowed;
                pointer-events: none;
            }

            .radio-input:disabled + .radio-visual:hover {
                background-color: var(--jt-bg-primary);
                border-color: var(--jt-border-color);
            }

            .radio-option-label {
                font-family: var(--jt-font-family);
                font-size: var(--jt-font-size-base);
                color: var(--jt-text-primary);
                line-height: var(--jt-line-height-normal);
                cursor: pointer;
                flex: 1;
            }

            .radio-option-label.disabled {
                cursor: not-allowed;
            }

            .radio-option-label strong {
                font-weight: var(--jt-font-weight-bold);
            }

            .radio-option-label em {
                font-style: italic;
            }

            .radio-option-label code {
                background-color: var(--jt-bg-tertiary);
                padding: 0.1em 0.3em;
                border-radius: var(--jt-border-radius-sm);
                font-family: var(--jt-font-family-mono);
                font-size: 0.9em;
            }

            .radio-option-label a {
                color: var(--jt-theme-color);
                text-decoration: none;
            }

            .radio-option-label a:hover {
                text-decoration: underline;
            }

            .radio-option-label del {
                text-decoration: line-through;
            }

            .caption {
                font-family: var(--jt-font-family);
                font-size: var(--jt-font-size-sm);
                color: var(--jt-text-secondary);
                line-height: var(--jt-line-height-normal);
                margin-left: 26px; /* Align with option text, not radio */
            }

            .horizontal .caption {
                margin-left: 0;
            }
        `;

        static properties = {
            label: { type: String },
            optionsJson: { type: String, attribute: 'options-json' },
            captionsJson: { type: String, attribute: 'captions-json' },
            index: { type: Number },
            help: { type: String },
            disabled: { type: Boolean },
            horizontal: { type: Boolean },
            labelVisibility: { type: String, attribute: 'label-visibility' },
            width: { type: String },
            componentKey: { type: String, attribute: 'component-key' }
        };

        constructor() {
            super();
            this.disabled = false;
            this.horizontal = false;
            this.labelVisibility = 'visible';
            this.index = null;
            this.options = [];
            this.captions = [];
        }

        connectedCallback() {
            super.connectedCallback();
            this.parseOptions();
            this.updateWidth();
        }

        updated(changedProperties) {
            super.updated(changedProperties);
            if (changedProperties.has('optionsJson') || changedProperties.has('captionsJson')) {
                this.parseOptions();
            }
            if (changedProperties.has('width')) {
                this.updateWidth();
            }
        }

        parseOptions() {
            try {
                this.options = this.optionsJson ? JSON.parse(this.optionsJson) : [];
                this.captions = this.captionsJson ? JSON.parse(this.captionsJson) : [];
            } catch (e) {
                console.error('Error parsing radio options or captions JSON:', e);
                this.options = [];
                this.captions = [];
            }
        }

        updateWidth() {
            if (this.width && this.width !== 'stretch') {
                if (this.width === 'content') {
                    this.style.removeProperty('--radio-width');
                } else if (this.width.match(/^\d+$/)) {
                    this.style.setProperty('--radio-width', `${this.width}px`);
                }
            } else if (this.width === 'stretch') {
                this.style.setProperty('--radio-width', '100%');
            }
        }

        handleRadioChange(e) {
            if (this.disabled) {
                e.preventDefault();
                return;
            }
            const selectedIndex = parseInt(e.target.value, 10);
            window.jeamlit.sendComponentUpdate(this.componentKey, selectedIndex);
        }

        render() {
            return html`
                <div class="radio-container">
                    ${this.labelVisibility !== 'collapsed' ? html`
                        <div class="label-row">
                            <div class="label ${this.labelVisibility === 'hidden' ? 'spacer' : ''}">
                                ${this.labelVisibility === 'hidden' ? html`&nbsp;` : html`<span class="markdown-content">${unsafeHTML(this.label)}</span>`}
                            </div>
                            ${this.help && this.labelVisibility === 'visible' ? html`
                                <jt-tooltip text="${this.help}"></jt-tooltip>
                            ` : ''}
                        </div>
                    ` : ''}

                    <div class="radio-group ${this.horizontal ? 'horizontal' : 'vertical'}">
                        ${this.options.map((option, i) => html`
                            <div class="radio-option">
                                <label class="radio-choice ${this.disabled ? 'disabled' : ''}">
                                    <div class="radio-wrapper">
                                        <input
                                            type="radio"
                                            class="radio-input"
                                            name="${this.componentKey}"
                                            value="${i}"
                                            .checked="${this.index === i}"
                                            ?disabled="${this.disabled}"
                                            @change="${this.handleRadioChange}"
                                        >
                                        <span class="radio-visual"></span>
                                    </div>
                                    <div class="radio-option-label ${this.disabled ? 'disabled' : ''}">
                                        <span class="markdown-content">${unsafeHTML(option)}</span>
                                    </div>
                                </label>
                                ${this.captions && this.captions[i] ? html`
                                    <div class="caption">${this.captions[i]}</div>
                                ` : ''}
                            </div>
                        `)}
                    </div>
                </div>
            `;
        }
    }

    customElements.define('jt-radio', JtRadio);
</script>