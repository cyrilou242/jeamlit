{{!
    Copyright Â© 2025 Cyril de Catheu (cdecatheu@hey.com)

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
}}
<script type="module">
    import {LitElement, html, css, unsafeHTML} from '{{ LIT_DEPENDENCY }}';

    class JtTitle extends LitElement {
        static styles = css`
            :host {
                display: block;
                margin: var(--jt-spacing-lg) 0;
            }

            .title-container {
                display: flex;
                align-items: center;
                gap: var(--jt-spacing-sm);
            }

            .title {
                margin: 0;
                font-size: var(--jt-font-size-4xl);
                font-weight: var(--jt-font-weight-bold);
                line-height: var(--jt-line-height-tight);
                color: var(--jt-text-primary);
                flex: 1;
                display: flex;
                align-items: center;
                gap: var(--jt-spacing-sm);
            }

            .title.width-content {
                flex: 0 0 auto;
                display: inline-flex;
            }

            .title.width-stretch {
                flex: 1;
            }

            .title.width-custom {
                flex: 0 0 auto;
                max-width: 100%;
            }

            .anchor-link {
                opacity: 0;
                transition: opacity var(--jt-transition-fast);
                color: var(--jt-text-secondary);
                text-decoration: none;
                font-size: var(--jt-font-size-lg);
                flex-shrink: 0;
            }

            .title:hover .anchor-link {
                opacity: 1;
            }

            .anchor-link:hover {
                color: var(--jt-primary-color);
            }

            /* Markdown-style formatting */

            .title em {
                font-style: italic;
            }

            .title strong {
                font-weight: var(--jt-font-weight-bold);
            }

            .title code {
                background-color: var(--jt-bg-tertiary);
                padding: 0.2em 0.4em;
                border-radius: var(--jt-border-radius-sm);
                font-family: var(--jt-font-family-mono);
                font-size: 0.9em;
            }
        `;

        static properties = {
            body: {type: String},
            anchor: {type: String},
            help: {type: String},
            width: {type: String}
        };

        generateAnchor(body) {
            if (!body) return '';
            return body
                    .toLowerCase()
                    .replace(/[^a-z0-9\s-]/g, '')
                    .replace(/\s+/g, '-')
                    .replace(/-+/g, '-')
                    .replace(/^-|-$/g, '');
        }

        getValidatedWidth() {
            if (!this.width) return '';

            // Check for valid width values
            if (this.width === 'stretch' || this.width === 'content') {
                return `width-${this.width}`;
            }

            // Check for integer (pixels)
            if (/^\d+$/.test(this.width)) {
                return 'width-custom';
            }

            // Invalid width, default to stretch
            return 'width-stretch';
        }

        getWidthStyle() {
            if (!this.width) return '';

            // Handle numeric width as pixels
            if (/^\d+$/.test(this.width)) {
                return `width: ${this.width}px;`;
            }

            return '';
        }

        render() {
            const widthClass = this.getValidatedWidth();
            const widthStyle = this.getWidthStyle();
            const formattedText = this.body;

            // Handle anchor logic
            let anchorId = '';
            let showAnchorLink = false;

            if (this.anchor === 'false' || this.anchor === false) {
                // Explicitly disabled
                anchorId = '';
                showAnchorLink = false;
            } else if (this.anchor) {
                // Explicitly set
                anchorId = this.anchor;
                showAnchorLink = true;
            } else {
                // Auto-generate from body
                anchorId = this.generateAnchor(this.body);
                showAnchorLink = !!anchorId;
            }

            return html`
                <div class="title-container">
                    <h1 class="title ${widthClass}"
                        id="${anchorId}"
                        style="${widthStyle}">
                        <span class="markdown-content">${unsafeHTML(this.body)}</span>
                        ${showAnchorLink ? html`
                            <a href="#${anchorId}" class="anchor-link"
                               title="Link to this section">
                                #
                            </a>
                        ` : ''}
                    </h1>
                    ${this.help ? html`
                        <jt-tooltip text="${this.help}"></jt-tooltip>
                    ` : ''}
                </div>
            `;
        }
    }

    customElements.define('jt-title', JtTitle);
</script>