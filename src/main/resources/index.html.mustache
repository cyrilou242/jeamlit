<!DOCTYPE html>
<html>
<head>
    <title>Jeamlit App</title>
    <link rel="stylesheet" href="{{ MATERIAL_SYMBOLS_CDN }}">
    {{> design_system.html.mustache }}
    <style>
        body {
            font-family: var(--jt-font-family);
            margin: 0;
            padding: var(--jt-spacing-xl);
            background-color: var(--jt-bg-secondary);
            color: var(--jt-text-primary);
            line-height: var(--jt-line-height-normal);
        }
        .app-wrapper {
            display: flex;
            max-width: 1200px;
            margin: 0 auto;
            gap: var(--jt-spacing-lg);
        }
        .layout-container {
            background: var(--jt-bg-primary);
            padding: var(--jt-spacing-xl);
            border-radius: var(--jt-border-radius-lg);
            box-shadow: var(--jt-shadow);
        }
        .main-layout {
            flex: 1;
            min-width: 0; /* Allow shrinking */
        }
        .sidebar-layout {
            display: block;
            width: 300px;
            flex-shrink: 0;
        }
        .sidebar-layout:empty {
            display: none; /* Hidden by default */
        }
        .error {
            background-color: #fee;
            border: 1px solid #fcc;
            color: var(--jt-danger-color);
            padding: var(--jt-spacing-md);
            border-radius: var(--jt-border-radius);
            margin: var(--jt-spacing-md) 0;
        }
    </style>
    {{ customHeaders }}
    {{> tooltip.html.mustache }}
    {{> connection-error-modal.html.mustache }}
</head>
<body>
<div id="app" class="app-wrapper">
    <!-- make sure this stays empty with no spaces - it uses the :empty selector to hide if there is nothing inside -->
    <div id="sidebar-container" class="layout-container sidebar-layout" data-container="sidebar"></div>
    <div id="main-container" class="layout-container main-layout" data-container="main">
        <p>Connecting to Jeamlit server...</p>
    </div>
</div>

<!-- Connection Error Modal -->
<jt-connection-error-modal id="connection-modal" prevent-close>
    <span slot="title">Connection Error</span>
    <p>Is Jeamlit still running? If you accidentally stopped Jeamlit, just restart it in your terminal:</p>
    <div id="copy-command" style="background: var(--jt-bg-secondary); border: 1px solid var(--jt-border-color); border-radius: var(--jt-border-radius); padding: var(--jt-spacing-sm) var(--jt-spacing-md); margin: var(--jt-spacing-md) 0; font-family: var(--jt-font-family-mono); font-size: var(--jt-font-size-sm); user-select: all; display: flex; align-items: center; justify-content: space-between;">
        <span>jeamlit run YourApp.java</span>
        <span id="copy-icon" style="font-family: 'Material Symbols Rounded'; font-size: var(--jt-font-size-base); color: var(--jt-text-secondary); margin-left: var(--jt-spacing-sm); cursor: pointer; user-select: none; padding: var(--jt-spacing-xs); border-radius: var(--jt-border-radius-sm); transition: background-color var(--jt-transition-fast), color var(--jt-transition-fast);">content_copy</span>
    </div>
</jt-connection-error-modal>

<script>
    const app = document.getElementById('app');
    const mainContainer = document.getElementById('main-container');
    const sidebarContainer = document.getElementById('sidebar-container');
    const connectionModal = document.getElementById('connection-modal');

    // Track if this is the first message to clear connecting text
    let isFirstMessage = true;

    // Connection management
    let ws = null;
    let connectionState = 'disconnected'; // 'connected', 'disconnected', 'reconnecting'

    // Create emit function for new component system
    window.jeamlit = {
        emit: function(componentKey, value) {
            if (ws && ws.readyState === WebSocket.OPEN) {
                ws.send(JSON.stringify({
                    type: 'component_update',
                    componentKey: componentKey,
                    value: value
                }));
            } else {
                console.log("Failed to send update to backend. Connection to backend is not available.");
            }
        }
    };

    // Connection management functions
    function createWebSocketConnection() {
        try {
            ws = new WebSocket('ws://localhost:{{ port }}/ws');

            ws.onclose = () => {
                console.log('WebSocket closed');
                handleConnectionLoss();
            };

            ws.onmessage = handleWebSocketMessage;
            
            ws.onopen = () => {
                if (connectionState === 'reconnecting') {
                    ws.send(JSON.stringify({
                        type: 'reload'
                    }));
                }
                connectionState = 'connected';
                console.log('WebSocket connected');
                connectionModal.show = false;
            };
            
            ws.onerror = (error) => {
                console.error('WebSocket error:', error);
            };
            
        } catch (error) {
            console.error('Failed to create WebSocket:', error);
            handleConnectionLoss();
        }
    }

    function handleConnectionLoss() {
        if (connectionState === 'connected') {
            // First time losing connection - show the connection lost modal
            connectionModal.show = true;
        }
        connectionState = 'reconnecting';
        setTimeout(() => {
            console.log('Attempting to reconnect...');
            createWebSocketConnection();
        }, 5000);
        
        // Clear websocket references
        ws = null;
    }

    function handleWebSocketMessage(event) {
        const message = JSON.parse(event.data);
        if (message.type === 'delta') {
            applyDelta(message);
        } else if (message.type === 'error') {
            showError(message.error);
        } else {
            alert(`Unknown message type ${message.type}. Please reach out to support.`);
        }
    }
    
    // Layout management
    const layoutContainers = new Map([
        ['main', mainContainer],
        ['sidebar', sidebarContainer]
    ]);
    
    // DOM mutation batching
    let pendingMutations = [];
    let mutationTimeout = null;
    let firstMutationTime = null;
    // mutations received at less than 4ms (~1 frame at 240fps) of space are batched together to avoid flickering
    // every time a mutation is received the 4ms time is reset ...
    const MUTATION_BATCH_WINDOW = 4;
    // ... so we set a hard limit to flush the batch of 16ms ~ 1 frame at 60fps
    // FIXME this means animation will only run at max 60fps (assuming 0 latency network) so we may want to make this value configurable
    //   in any case streamlit does not ensure constant frame rate because of the delivery via ws
    const MAX_BATCH_WAIT_TIME = 16;

    function createElementFromHTML(htmlString) {
        if (!htmlString) {
            return null;
        }
        const template = document.createElement('template');
        template.innerHTML = htmlString.trim();
        return template.content.firstChild;
    }

    function handleComponentRegistrations(registrations) {
        if (!registrations || registrations.length === 0) return;
        
        // Ensure a hidden container is present
        let container = document.getElementById('jeamlit-registrations');
        if (!container) {
            container = document.createElement('div');
            container.id = 'jeamlit-registrations';
            container.style.display = 'none';
            document.body.appendChild(container);
        }

        registrations.forEach((registration) => {
            // Parse the registration HTML safely
            const template = document.createElement('template');
            template.innerHTML = registration;
            const fragment = template.content;

            // Execute all <script> tags inside the fragment
            fragment.querySelectorAll('script').forEach((script) => {
                const newScript = document.createElement('script');
                if (script.type) newScript.type = script.type;
                if (script.src) {
                    newScript.src = script.src;
                } else {
                    newScript.textContent = script.textContent;
                }
                document.head.appendChild(newScript);
            });

            // Inject the rest of the HTML (custom elements etc.)
            container.appendChild(fragment);
        });
    }

    function applyDelta(message) {
        const { 
            index = null,                 // null means append
            html, 
            container,                       // should always be set
            clearBefore = false           // Default to no clearing
        } = message;
        
        // Clear initial "Connecting..." message on first delta
        if (isFirstMessage) {
            mainContainer.innerHTML = '';
            isFirstMessage = false;
        }
        
        // Handle component registrations immediately
        handleComponentRegistrations(message.registrations);
        
        // Create element immediately (outside batch)
        const newElement = createElementFromHTML(html);

        // Queue DOM mutations
        pendingMutations.push({
            type: 'delta',
            index,
            element: newElement,
            container: container,
            clearBefore
        });
        
        // Track first mutation time
        if (!firstMutationTime) {
            firstMutationTime = Date.now();
        }
        
        // Check if we've waited too long
        const elapsed = Date.now() - firstMutationTime;
        if (elapsed >= MAX_BATCH_WAIT_TIME) {
            // Force immediate processing to prevent starvation
            if (mutationTimeout) {
                clearTimeout(mutationTimeout);
                mutationTimeout = null;
            }
            processMutations();
            firstMutationTime = null;
        } else {
            // Normal batch processing
            if (mutationTimeout) {
                clearTimeout(mutationTimeout);
            }
            
            mutationTimeout = setTimeout(() => {
                processMutations();
                mutationTimeout = null;
                firstMutationTime = null;
            }, MUTATION_BATCH_WINDOW);
        }
    }
    
    function processMutations() {
        if (pendingMutations.length === 0) return;
        
        requestAnimationFrame(() => {
            // Group mutations by container
            const mutationsByContainer = new Map();
            
            pendingMutations.forEach(mutation => {
                // Get target container for this container
                if (!mutationsByContainer.has(mutation.container)) {
                    mutationsByContainer.set(mutation.container, []);
                }
                mutationsByContainer.get(mutation.container).push(mutation);
            });
            
            // Process mutations for each container separately
            mutationsByContainer.forEach((mutations, container) => {
                const containerEl = document.querySelector(`[data-container="${container}"]`);
                if (!containerEl) {
                    throw new Error(`Nested container not found for path: ${container}. Implementation error. Please reach out to support.`);
                }
                // Find first mutation that requires clearing for this container
                const firstClearMutation = mutations.find(m => m.clearBefore && m.index !== null);
                
                if (firstClearMutation) {
                    // CLEARING PATH: Clear from index and append all
                    const clearFromIndex = firstClearMutation.index;
                    while (containerEl.children.length > clearFromIndex) {
                        containerEl.removeChild(containerEl.lastChild);
                    }
                }
                mutations.forEach(mutation => {
                    // in the clearing case, it can happen that the element is null to trigger a full cleanup - so checking here but not below
                    if (mutation.element) {
                        if (mutation.index !== null && mutation.index < containerEl.children.length) {
                            containerEl.children[mutation.index].replaceWith(mutation.element);
                        } else {
                            containerEl.appendChild(mutation.element);
                        }
                    }
                });
            });
            
            pendingMutations = [];
        });
    }

    function showError(error) {
        const errorDiv = document.createElement('div');
        errorDiv.className = 'error';
        errorDiv.textContent = 'Error: ' + error;
        mainContainer.appendChild(errorDiv);
    }

    // Initialize connection
    createWebSocketConnection();
</script>
</body>
</html>