package tech.catheu.jeamlit.core;

import tech.catheu.jeamlit.exception.DuplicateWidgetIDException;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Supplier;

public class ExecutionContext {

    private final String sessionId;
    private final List<JtComponent<?>> jtComponents = new ArrayList<>();
    private final Map<String, Object> widgetStates = new HashMap<>();
    private final Map<String, JtComponent<?>> componentRegistry = new HashMap<>();

    public ExecutionContext(String sessionId) {
        this.sessionId = sessionId;
    }

    /**
     * Generate a key based on component type and parameters.
     * Throws DuplicateWidgetIDException if key already exists (Streamlit behavior).
     */
    public String generateKey(String componentType, String... parameters) {
        String key = componentType + "_" + String.join("_", parameters)
                .replaceAll("[^a-zA-Z0-9_]", "_");

        // Check if this key already exists - throw error like Streamlit
        if (componentRegistry.containsKey(key)) {
            throw DuplicateWidgetIDException.forAutoGeneratedKey(componentType, key);
        }

        return key;
    }

    public void addJtComponent(JtComponent<?> component) {
        jtComponents.add(component);
    }

    @SuppressWarnings("unchecked")
    public <T extends JtComponent<?>> T getComponent(final String key, final Supplier<T> factory, final boolean isExplicitKey) {
        JtComponent<?> component = componentRegistry.get(key);
        if (component == null) {
            component = factory.get();
            // Set the component ID to be the key - this ensures frontend/backend consistency
            component.setId(key);
            componentRegistry.put(key, component);

            // Restore state from session if available
            SessionState session = Jt.getSessions().get(sessionId);
            if (session != null) {
                // Check by key (which is now the same as component ID)
                Object state = session.getWidgetState(key);
                if (state != null) {
                    component.updateValue(state);
                }
            }
        } else {
            // Component already exists - this is a collision
            if (isExplicitKey) {
                throw DuplicateWidgetIDException.forExplicitKey(component.getClass().getSimpleName(), key);
            } else {
                // This should not happen since generateKey() already checks for collisions
                throw DuplicateWidgetIDException.forAutoGeneratedKey(component.getClass().getSimpleName(), key);
            }
        }
        return (T) component;
    }


    public List<JtComponent<?>> getJtComponents() {
        return new ArrayList<>(jtComponents);
    }

    public Map<String, Object> getWidgetStates() {
        // Include states from JtComponents
        Map<String, Object> allStates = new HashMap<>(widgetStates);
        for (Map.Entry<String, JtComponent<?>> entry : componentRegistry.entrySet()) {
            allStates.put(entry.getKey(), entry.getValue().currentValue);
        }
        return allStates;
    }

    public String getSessionId() {
        return sessionId;
    }
}
