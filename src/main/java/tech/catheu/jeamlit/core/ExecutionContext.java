package tech.catheu.jeamlit.core;

import tech.catheu.jeamlit.exception.DuplicateWidgetIDException;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExecutionContext {

    private final String sessionId;
    private final List<JtComponent<?>> jtComponents = new ArrayList<>();
    private final Map<String, Object> widgetStates = new HashMap<>();
    private final Map<String, JtComponent<?>> componentRegistry = new HashMap<>();

    public ExecutionContext(String sessionId) {
        this.sessionId = sessionId;
    }

    /**
     * Generate a key based on component type and parameters.
     * Throws DuplicateWidgetIDException if key already exists (Streamlit behavior).
     */
    public String generateKey(String componentType, String... parameters) {
        String key = componentType + "_" + String.join("_", parameters).replaceAll("[^a-zA-Z0-9_]",
                                                                                   "_");

        // Check if this key already exists - throw error like Streamlit
        if (componentRegistry.containsKey(key)) {
            throw DuplicateWidgetIDException.forAutoGeneratedKey(componentType, key);
        }

        return key;
    }

    @SuppressWarnings("unchecked")
    public <T> JtComponent<T> addComponent(final JtComponent<T> component) {
        final String key = component.getKey();
        if (componentRegistry.containsKey(key)) {
            // FIXME CYRIL HERE WE DON'T KNOW WHETHER THE KEY IS GENERATED OR CUSTOM
            throw DuplicateWidgetIDException.forAutoGeneratedKey(component.getKey(), key);
        }
        componentRegistry.put(key, component);
        // Restore state from session if available
        final SessionState session = Jt.getSessions().get(sessionId);
        if (session == null) {
            throw new IllegalStateException("Session not found: " + sessionId);
        }
        final Object state = session.getWidgetState(key);
        if (state != null) {
            component.updateValue(state);
        }
        jtComponents.add(component);
        return component;
    }


    public List<JtComponent<?>> getJtComponents() {
        return new ArrayList<>(jtComponents);
    }

    public Map<String, Object> getWidgetStates() {
        // Include states from JtComponents
        Map<String, Object> allStates = new HashMap<>(widgetStates);
        for (Map.Entry<String, JtComponent<?>> entry : componentRegistry.entrySet()) {
            allStates.put(entry.getKey(), entry.getValue().currentValue);
        }
        return allStates;
    }

    public String getSessionId() {
        return sessionId;
    }
}
