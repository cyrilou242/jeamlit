let's create 1 github issue for each of these components:

- Link button component: https://docs.streamlit.io/develop/api-reference/widgets/st.link_button
- Page link component: https://docs.streamlit.io/develop/api-reference/widgets/st.page_link
- Toggle component: https://docs.streamlit.io/develop/api-reference/widgets/st.toggle
- Selectbox component: https://docs.streamlit.io/develop/api-reference/widgets/st.selectbox
- Radio component https://docs.streamlit.io/develop/api-reference/widgets/st.radio
- Checkbox component: https://docs.streamlit.io/develop/api-reference/widgets/st.checkbox
Make sure to only process the components above, no more, no less.

create backend specs that are made similar to:
- notes/todo/number_input_backend.txt
- notes/todo/text_area_backend.txt
- notes/todo/text_input_backend.txt

Please note:
- Make sure to read all specs all at once to see if some components relate to each other. Then re-read them 1 by 1 when generating the issue.
- Make sure to adapt None (Python) to null in Java.
- If something has too much dynamic typing, put a warning at the start of the ticket: "WARNING: lot's of dynamic typing, spec needs proper review".
- If a field has some dynamic typing and no existing implementation in the existing components, add a WARNING - dynamic typing to the field spec.
- If some field is already defined in the text_area_backend spec and is the same in one of the component above, re-use the spec from the example.
- ignore args and kwargs fields.
- ignore use_container_width if it is marked as deprecated
- the end format should match the format of the examples.
- the "key" parameter should always be specified as a string
- when a return value or an input value can be a String or a List of String, and more generally when it is either a <T> or a List<T>, because java has not dynamic typing, let's just specify it as returning a List<T>
- make the field names bold in the issue message
- apart from the list of notes above, you should copy the streamlit doc as verbatim as possible.

You can create issues with for instance:
gh issue create \
      --title "Test Issue: Lorem Ipsum Integration Test" \
      --body "Long lorem ipsum text with formatting" \
      --repo cyrilou242/jeamlit

Make sure to escape quotes properly if you don't want to run into issues with the command above.
